import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { apiRequest } from "@/services/apiRequest";
import { RootState } from "../../store";
import { ChannelsObj } from "./getAll";

// here we are typing the types for the state
type ChannelMembersObj = {
    uid: number;
    username: string;
    email: string;
    first_name: string;
    last_name: string;
    avatar_img: string;
};

type InitialState = {
    data: ChannelMembersObj[];
    loading: boolean;
    error: boolean;
    errorMsg: string;
};

const initialState: InitialState = {
    data: [],
    loading: true,
    error: false,
    errorMsg: "",
};

// This action is what we will call using the dispatch in order to trigger the API call.
export const getChannelMembers = createAsyncThunk(
    "channels/getMembers",
    async (channel_uid: number, { rejectWithValue }) => {
        const response = await apiRequest({
            method: "POST",
            data: { channel_uid },
            url: "channels/getMembers",
        });
        if (!response.data.status) {
            return rejectWithValue(response.data.data);
        }
        return response.data.data;
    }
);

export const channelMembersSlice = createSlice({
    name: "channelMembers",
    initialState,
    reducers: {
        // leave this empty here
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
    // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
    // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
    extraReducers: (builder) => {
        builder
            .addCase(getChannelMembers.pending, (state) => {
                state.loading = true;
            })
            .addCase(getChannelMembers.fulfilled, (state, { payload }) => {
                // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
                state.loading = false;
                state.data = payload;
            })
            .addCase(getChannelMembers.rejected, (state) => {
                state.loading = false;
                state.error = true;
            });
    },
});

export const selectChannelMembers = (state: RootState) => state.channelMembers;

export default channelMembersSlice.reducer;
